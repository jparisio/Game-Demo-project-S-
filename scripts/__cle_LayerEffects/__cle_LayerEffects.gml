
/// @Feather ignore all
/// @ignore
function __cle_LayerFX() constructor {
	__pass = -1; // Indicates whether the effect corresponds to the type of layer renderer
	
	static Begin = function() {}
	static End = function() {}
}

/// @desc Effect for a Material Layer. Generates normal maps on an entire layer, based on the luminance of the sprites.
/// NOTE: Normal maps drawn manually or generated by other appropriate software will ALWAYS look better. Recommended to use this for tilesets and such, or even for testing, since there is GPU usage to render the normals.
/// @param {Real} angle The normal map rotation.
/// @param {Real} offsetX Horizontal offset. Default is 1. 0 means no offset.
/// @param {Real} offsetY Vertical offset. Default is 1. 0 means no offset.
/// @param {Real} strengthX Horizontal strength/intensity. Default is 1.
/// @param {Real} strengthY Vertical strength/intensity. Default is 1.
/// @param {Real} thresholdMin Luminance min filter.
/// @param {Real} thresholdMax Luminance max filter.
/// @param {Real} blurAmount Blur amount. You need to have mip maps enabled (in texture groups too) for this to work.
function Crystal_LayerFXNormalFromLuminance(_angle=0, _offsetX=1, _offsetY=1, _strengthX=5, _strengthY=5, _thresholdMin=0, _thresholdMax=1, _blurAmount=0, _outlineRadius=0) : __cle_LayerFX() constructor {
	__pass = CRYSTAL_PASS.NORMALS;
	__shader = __cle_shLeffectNormalGrayscale;
	__u_angle = shader_get_uniform(__shader, "u_angle");
	__u_scale = shader_get_uniform(__shader, "u_scale");
	__u_texel = shader_get_uniform(__shader, "u_texel");
	__u_offset = shader_get_uniform(__shader, "u_offset");
	__u_strength = shader_get_uniform(__shader, "u_strength");
	__u_threshold = shader_get_uniform(__shader, "u_threshold");
	__u_blurAmount = shader_get_uniform(__shader, "u_blurAmount");
	__u_outlineRadius = shader_get_uniform(__shader, "u_outlineRadius");
	
	angle = _angle;
	xScale = 1;
	yScale = 1;
	offsetX = _offsetX;
	offsetY = _offsetY;
	strengthX = _strengthX;
	strengthY = _strengthY;
	thresholdMin = _thresholdMin;
	thresholdMax = _thresholdMax;
	blurAmount = _blurAmount;
	outlineRadius = _outlineRadius;
	
	static Begin = function(_width, _height) {
		shader_set(__shader);
		shader_set_uniform_f(__u_texel, 1/_width, 1/_height);
		shader_set_uniform_f(__u_angle, angle);
		shader_set_uniform_f(__u_scale, xScale, yScale);
		shader_set_uniform_f(__u_offset, offsetX, offsetY);
		shader_set_uniform_f(__u_strength, strengthX, strengthY);
		shader_set_uniform_f(__u_threshold, thresholdMin, thresholdMax);
		shader_set_uniform_f(__u_blurAmount, blurAmount);
		shader_set_uniform_f(__u_outlineRadius, outlineRadius);
	}
}
